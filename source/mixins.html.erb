<div class="row">
  <div class="container">
    <h1>Mixins</h1>
    <p>Furatto comes with many weapons under the hood, in this case mixins, that some of them are used on the core of compiling it, but other ones are just for you.</p>
		<div class="row">
			<h4><em>@mixin retina-image</em></h4>
      <p>This mixin will help you generate the necessary css code to support retina images.</p>
    	<div class="four columns">
    		<ul>
    			<li>
        	 <strong>$image</strong>
        			-path or url of the retina image, ej. /assets/images/retina@2x.png
      		</li>
    			<li>
      			<strong>$width</strong>
        			- the width for the image
        	</li>
      		<li>
      			<strong>$height</strong>
        			- the height for the image
    			</li>
        </ul>
      </div>
    	<div class="eight columns">
       	<pre>
	  			<code class="language-scss" data-language="scss">
  // Mixin to add support for retina display on images
  @mixin retina-image($image, $width, $height) {
    @media (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {
    /* on retina, use image that's scaled by 2 */
    background-image: url($image);
    background-size: $width $height;
    }
  } </code>
	 		</pre>
		</div>
  </div>
	<div class="row">
		<h4><em>@mixin truncate-text</em></h4>
    <p>Truncating the text can be made through css, and is even easier with this handy mixin.</p>
    <pre>
      <code class="language-scss" data-language="scss">
  // Mixin to add support for retina display on images
  @mixin retina-image($image, $width, $height) {
    @media (min--moz-device-pixel-ratio: 1.3),
         (-o-min-device-pixel-ratio: 2.6/2),
         (-webkit-min-device-pixel-ratio: 1.3),
         (min-device-pixel-ratio: 1.3),
         (min-resolution: 1.3dppx) {
    /* on retina, use image that's scaled by 2 */
    background-image: url($image);
    background-size: $width $height;
    }
  } </code>
		</pre>
	</div>
	<div class="row">
		<h4><em>@mixin absPosition</em></h4>
    <p>Thinking about position your elements with absolute values, this mixin is the way to go.</p>
   	<div class="four columns">
      <ul>
  			<li>
          <strong>$top</strong>
        	- top value position
        </li>
        <li>
        	<strong>$right</strong>
    			- right value position
        </li>
        <li>
    			<strong>$bottom</strong>
   				- bottom value position
        </li>
        <li>
        	<strong>$left</strong>
   				- left value position
        </li>
      </ul>
    </div>
    <div class="eight columns">
      <pre>
				<code class="language-scss" data-language="scss">
  //Mixin to set the abs position of any element
  @mixin absPosition($top: auto, $right: auto, $bottom:   auto, $left: auto)  {
    position: absolute;
    top: $top;
    right: $right;
    bottom: $bottom;
    left: $left;
  }	</code>
			</pre>
		</div>
  </div>
	<div class="row">
		<h4><em>@mixin hidden-text</em></h4>
    <p>This reall helpful mixin will hide the text, but still be counting for SEO. Kudos to Nicolas Gallagher.</p>
    <pre>
			<code class="language-scss" data-language="scss">
  // Hidden text - by Nicolas Gallagher
  @mixin hidden-text {
    font: 0/0 a;
    text-shadow: none;
    color: transparent;
  } </code>
		</pre>
	</div>
	<div class="row">
		<h4><em>@mixin font-size</em></h4>
    <p>An easy way to support font-size on rem and pixel values to a better support for IE is this mixin.</p>
    <ul>
      <li>
      	<strong>$size</strong>
  			- the desired font size
      </li>
      <li>
        <strong>$line</strong>
        - the line height to that font size
      </li>
    </ul>
    <pre>
			<code class="language-scss" data-language="scss">
  // Font-size mixin, with IE7 & IE8 support, CSS tricks courtesy
  @mixin font-size($size: 1.6, $line: $size * 1.25) {
    font-size: ($size * 10) + px;
    line-height: ($line * 10) + px;
    font-size: $size + rem;
    line-height: $line + rem;
  }			</code>
		</pre>
  </div>
	<div class="row">
		<h4><em>@mixin keyframes</em></h4>
    <p>An easy way to handle keyframes for css animations is provided by this mixin. </p>
    <ul>
      <li>    
    		<strong>$name</strong>
  			- animation class name
      </li>
    </ul>
    <pre>
		  <code class="language-scss" data-language="scss">
  // Animation keyframes
  @mixin keyframes($name) {
    @-webkit-keyframes #{$name} {
      @content
  }
  @-moz-keyframes #{$name} {
    @content
  }
  @-ms-keyframes #{$name} {
    @content
  }
  @-o-keyframes #{$name} {
    @content
  }
  @keyframes #{$name} {
    @content
  }
}</code>
		</pre>	
	</div>
  <div class="row">
		<h4><em>@mixin box-emboss</em></h4>
    <p>This mixin will help you build an embossing and letterpress effect.</p>
    <ul>
      <li>
        <strong>$outerOpacity</strong>
        - the outer opacity, ej. 0.5
      </li>
      <li>
        <strong>$innerOpacity</strong>
        - the inner opacity, ej. 0.1
      </li>
    </ul>
    <pre>
			<code class="language-scss" data-language="scss">
  // Embossing and letterpress effect
  @mixin box-emboss($outerOpacity, $innerOpacity) {
    @include box-shadow(rgba(white, $outerOpacity) 0 1p 0,
                      rgba(black, $innerOpacity) 0 1px 0 inset);
}</code>
		</pre>
 	</div>